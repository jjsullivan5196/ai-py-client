# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_event(self, app_id, event_type, event_id, **kwargs):  # noqa: E501
        """Get an event  # noqa: E501

        Gets the data for a single event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_event(app_id, event_type, event_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param str event_type: The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. (required)
        :param str event_id: ID of event. (required)
        :param str timespan: Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression.
        :return: EventsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_event_with_http_info(app_id, event_type, event_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_event_with_http_info(app_id, event_type, event_id, **kwargs)  # noqa: E501
            return data

    def get_event_with_http_info(self, app_id, event_type, event_id, **kwargs):  # noqa: E501
        """Get an event  # noqa: E501

        Gets the data for a single event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_event_with_http_info(app_id, event_type, event_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param str event_type: The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. (required)
        :param str event_id: ID of event. (required)
        :param str timespan: Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression.
        :return: EventsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'event_type', 'event_id', 'timespan']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_event`")  # noqa: E501
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_event`")  # noqa: E501
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `get_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501
        if 'event_id' in params:
            path_params['event-id'] = params['event_id']  # noqa: E501

        query_params = []
        if 'timespan' in params:
            query_params.append(('timespan', params['timespan']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json;odata=none', 'application/json;odata=minimal', 'application/json;odata=full'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/events/{event-type}/{event-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventsResults',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_events(self, app_id, event_type, **kwargs):  # noqa: E501
        """Execute OData query  # noqa: E501

        Executes an OData query for events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_events(app_id, event_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param str event_type: The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. (required)
        :param str timespan: Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression.
        :param str filter: An expression used to filter the returned events
        :param str search: A free-text search expression to match for whether a particular event should be returned
        :param str orderby: A comma-separated list of properties with \\\"asc\\\" (the default) or \\\"desc\\\" to control the order of returned events
        :param str select: Limits the properties to just those requested on each returned event
        :param int skip: The number of items to skip over before returning events
        :param int top: The number of events to return
        :param str format: Format for the returned events
        :param bool count: Request a count of matching items included with the returned events
        :param str apply: An expression used for aggregation over returned events
        :return: EventsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_events_with_http_info(app_id, event_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_events_with_http_info(app_id, event_type, **kwargs)  # noqa: E501
            return data

    def get_events_with_http_info(self, app_id, event_type, **kwargs):  # noqa: E501
        """Execute OData query  # noqa: E501

        Executes an OData query for events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_events_with_http_info(app_id, event_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param str event_type: The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. (required)
        :param str timespan: Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression.
        :param str filter: An expression used to filter the returned events
        :param str search: A free-text search expression to match for whether a particular event should be returned
        :param str orderby: A comma-separated list of properties with \\\"asc\\\" (the default) or \\\"desc\\\" to control the order of returned events
        :param str select: Limits the properties to just those requested on each returned event
        :param int skip: The number of items to skip over before returning events
        :param int top: The number of events to return
        :param str format: Format for the returned events
        :param bool count: Request a count of matching items included with the returned events
        :param str apply: An expression used for aggregation over returned events
        :return: EventsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'event_type', 'timespan', 'filter', 'search', 'orderby', 'select', 'skip', 'top', 'format', 'count', 'apply']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_events`")  # noqa: E501
        # verify the required parameter 'event_type' is set
        if ('event_type' not in params or
                params['event_type'] is None):
            raise ValueError("Missing the required parameter `event_type` when calling `get_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501
        if 'event_type' in params:
            path_params['event-type'] = params['event_type']  # noqa: E501

        query_params = []
        if 'timespan' in params:
            query_params.append(('timespan', params['timespan']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'search' in params:
            query_params.append(('$search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'format' in params:
            query_params.append(('$format', params['format']))  # noqa: E501
        if 'count' in params:
            query_params.append(('$count', params['count']))  # noqa: E501
        if 'apply' in params:
            query_params.append(('$apply', params['apply']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;odata=none', 'application/json;odata=minimal', 'application/json;odata=full'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/events/{event-type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventsResults',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_events_metadata_o_data(self, app_id, **kwargs):  # noqa: E501
        """Get OData metadata  # noqa: E501

        Gets OData EDMX metadata describing the event data model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_events_metadata_o_data(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_events_metadata_o_data_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_events_metadata_o_data_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def get_events_metadata_o_data_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """Get OData metadata  # noqa: E501

        Gets OData EDMX metadata describing the event data model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_events_metadata_o_data_with_http_info(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_metadata_o_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_events_metadata_o_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/events/$metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metric(self, app_id, metric_id, **kwargs):  # noqa: E501
        """Retrieve metric data  # noqa: E501

        Gets metric values for a single metric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metric(app_id, metric_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param str metric_id: ID of the metric. This is either a standard AI metric, or an application-specific custom metric. (required)
        :param str timespan: The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` (\"last 12 hours\") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response.
        :param str interval: The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response.
        :param str aggregation: The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` (\"last 12 hours\") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response.
        :param list[str] segment: The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter.
        :param int top: The number of segments to return.  This value is only valid when segment is specified.
        :param str orderby: The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified.
        :param str filter: An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving.
        :return: MetricsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metric_with_http_info(app_id, metric_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metric_with_http_info(app_id, metric_id, **kwargs)  # noqa: E501
            return data

    def get_metric_with_http_info(self, app_id, metric_id, **kwargs):  # noqa: E501
        """Retrieve metric data  # noqa: E501

        Gets metric values for a single metric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metric_with_http_info(app_id, metric_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param str metric_id: ID of the metric. This is either a standard AI metric, or an application-specific custom metric. (required)
        :param str timespan: The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` (\"last 12 hours\") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response.
        :param str interval: The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response.
        :param str aggregation: The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` (\"last 12 hours\") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response.
        :param list[str] segment: The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter.
        :param int top: The number of segments to return.  This value is only valid when segment is specified.
        :param str orderby: The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified.
        :param str filter: An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving.
        :return: MetricsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'metric_id', 'timespan', 'interval', 'aggregation', 'segment', 'top', 'orderby', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_metric`")  # noqa: E501
        # verify the required parameter 'metric_id' is set
        if ('metric_id' not in params or
                params['metric_id'] is None):
            raise ValueError("Missing the required parameter `metric_id` when calling `get_metric`")  # noqa: E501

        if ('segment' in params and
                len(params['segment']) < 1):
            raise ValueError("Invalid value for parameter `segment` when calling `get_metric`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501
        if 'metric_id' in params:
            path_params['metric-id'] = params['metric_id']  # noqa: E501

        query_params = []
        if 'timespan' in params:
            query_params.append(('timespan', params['timespan']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'aggregation' in params:
            query_params.append(('aggregation', params['aggregation']))  # noqa: E501
        if 'segment' in params:
            query_params.append(('segment', params['segment']))  # noqa: E501
            collection_formats['segment'] = 'csv'  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/metrics/{metric-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics(self, app_id, body, **kwargs):  # noqa: E501
        """Retrieve metric data  # noqa: E501

        Gets metric values for multiple metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metrics(app_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param MetricsPostBody body: The batched metrics query. (required)
        :return: MetricsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metrics_with_http_info(app_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_with_http_info(app_id, body, **kwargs)  # noqa: E501
            return data

    def get_metrics_with_http_info(self, app_id, body, **kwargs):  # noqa: E501
        """Retrieve metric data  # noqa: E501

        Gets metric values for multiple metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metrics_with_http_info(app_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param MetricsPostBody body: The batched metrics query. (required)
        :return: MetricsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_metrics`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetricsResults',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metrics_metadata(self, app_id, **kwargs):  # noqa: E501
        """Retrieve metric metatadata  # noqa: E501

        Gets metadata describing the available metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metrics_metadata(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metrics_metadata_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metrics_metadata_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def get_metrics_metadata_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """Retrieve metric metatadata  # noqa: E501

        Gets metadata describing the available metrics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metrics_metadata_with_http_info(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metrics_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_metrics_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/metrics/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_query(self, app_id, **kwargs):  # noqa: E501
        """Execute an Analytics query  # noqa: E501

        Executes an Analytics query for data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_query(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param str query: The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
        :param str timespan: Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.
        :param list[str] applications: Application IDs to include in cross-application queries.
        :return: QueryResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_query_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_query_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def get_query_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """Execute an Analytics query  # noqa: E501

        Executes an Analytics query for data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_query_with_http_info(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param str query: The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
        :param str timespan: Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.
        :param list[str] applications: Application IDs to include in cross-application queries.
        :return: QueryResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'query', 'timespan', 'applications']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'timespan' in params:
            query_params.append(('timespan', params['timespan']))  # noqa: E501
        if 'applications' in params:
            query_params.append(('applications', params['applications']))  # noqa: E501
            collection_formats['applications'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryResults',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_query_schema(self, app_id, **kwargs):  # noqa: E501
        """Get Analytics query metadata  # noqa: E501

        Gets Analytics query schema describing the data model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_query_schema(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_query_schema_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_query_schema_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def get_query_schema_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """Get Analytics query metadata  # noqa: E501

        Gets Analytics query schema describing the data model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_query_schema_with_http_info(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_query_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `get_query_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/query/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query(self, app_id, **kwargs):  # noqa: E501
        """Execute an Analytics query  # noqa: E501

        Executes an Analytics query for data. [Here](/documentation/2-Using-the-API/Query) is an example for using POST with an Analytics query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param QueryBody body: The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
        :param str timespan: Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.
        :return: QueryResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.query_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def query_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """Execute an Analytics query  # noqa: E501

        Executes an Analytics query for data. [Here](/documentation/2-Using-the-API/Query) is an example for using POST with an Analytics query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_with_http_info(app_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str app_id: ID of the application. This is Application ID from the API Access settings blade in the Azure portal. (required)
        :param QueryBody body: The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
        :param str timespan: Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.
        :return: QueryResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'body', 'timespan']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['app-id'] = params['app_id']  # noqa: E501

        query_params = []
        if 'timespan' in params:
            query_params.append(('timespan', params['timespan']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['azure_auth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{app-id}/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryResults',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
