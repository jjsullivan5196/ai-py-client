# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventsPerformanceCounterInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'int',
        'name': 'str',
        'category': 'str',
        'counter': 'str',
        'instance_name': 'str',
        'instance': 'str'
    }

    attribute_map = {
        'value': 'value',
        'name': 'name',
        'category': 'category',
        'counter': 'counter',
        'instance_name': 'instanceName',
        'instance': 'instance'
    }

    def __init__(self, value=None, name=None, category=None, counter=None, instance_name=None, instance=None):  # noqa: E501
        """EventsPerformanceCounterInfo - a model defined in Swagger"""  # noqa: E501

        self._value = None
        self._name = None
        self._category = None
        self._counter = None
        self._instance_name = None
        self._instance = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if counter is not None:
            self.counter = counter
        if instance_name is not None:
            self.instance_name = instance_name
        if instance is not None:
            self.instance = instance

    @property
    def value(self):
        """Gets the value of this EventsPerformanceCounterInfo.  # noqa: E501

        The value of the performance counter  # noqa: E501

        :return: The value of this EventsPerformanceCounterInfo.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EventsPerformanceCounterInfo.

        The value of the performance counter  # noqa: E501

        :param value: The value of this EventsPerformanceCounterInfo.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def name(self):
        """Gets the name of this EventsPerformanceCounterInfo.  # noqa: E501

        The name of the performance counter  # noqa: E501

        :return: The name of this EventsPerformanceCounterInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventsPerformanceCounterInfo.

        The name of the performance counter  # noqa: E501

        :param name: The name of this EventsPerformanceCounterInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this EventsPerformanceCounterInfo.  # noqa: E501

        The category of the performance counter  # noqa: E501

        :return: The category of this EventsPerformanceCounterInfo.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventsPerformanceCounterInfo.

        The category of the performance counter  # noqa: E501

        :param category: The category of this EventsPerformanceCounterInfo.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def counter(self):
        """Gets the counter of this EventsPerformanceCounterInfo.  # noqa: E501

        The counter of the performance counter  # noqa: E501

        :return: The counter of this EventsPerformanceCounterInfo.  # noqa: E501
        :rtype: str
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EventsPerformanceCounterInfo.

        The counter of the performance counter  # noqa: E501

        :param counter: The counter of this EventsPerformanceCounterInfo.  # noqa: E501
        :type: str
        """

        self._counter = counter

    @property
    def instance_name(self):
        """Gets the instance_name of this EventsPerformanceCounterInfo.  # noqa: E501

        The instance name of the performance counter  # noqa: E501

        :return: The instance_name of this EventsPerformanceCounterInfo.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this EventsPerformanceCounterInfo.

        The instance name of the performance counter  # noqa: E501

        :param instance_name: The instance_name of this EventsPerformanceCounterInfo.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def instance(self):
        """Gets the instance of this EventsPerformanceCounterInfo.  # noqa: E501

        The instance of the performance counter  # noqa: E501

        :return: The instance of this EventsPerformanceCounterInfo.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this EventsPerformanceCounterInfo.

        The instance of the performance counter  # noqa: E501

        :param instance: The instance of this EventsPerformanceCounterInfo.  # noqa: E501
        :type: str
        """

        self._instance = instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsPerformanceCounterInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
