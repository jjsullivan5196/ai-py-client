# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.events_exception_detail import EventsExceptionDetail  # noqa: F401,E501


class EventsExceptionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity_level': 'int',
        'problem_id': 'str',
        'handled_at': 'str',
        'assembly': 'str',
        'method': 'str',
        'message': 'str',
        'type': 'str',
        'outer_type': 'str',
        'outer_method': 'str',
        'outer_assembly': 'str',
        'outer_message': 'str',
        'innermost_type': 'str',
        'innermost_message': 'str',
        'innermost_method': 'str',
        'innermost_assembly': 'str',
        'details': 'list[EventsExceptionDetail]'
    }

    attribute_map = {
        'severity_level': 'severityLevel',
        'problem_id': 'problemId',
        'handled_at': 'handledAt',
        'assembly': 'assembly',
        'method': 'method',
        'message': 'message',
        'type': 'type',
        'outer_type': 'outerType',
        'outer_method': 'outerMethod',
        'outer_assembly': 'outerAssembly',
        'outer_message': 'outerMessage',
        'innermost_type': 'innermostType',
        'innermost_message': 'innermostMessage',
        'innermost_method': 'innermostMethod',
        'innermost_assembly': 'innermostAssembly',
        'details': 'details'
    }

    def __init__(self, severity_level=None, problem_id=None, handled_at=None, assembly=None, method=None, message=None, type=None, outer_type=None, outer_method=None, outer_assembly=None, outer_message=None, innermost_type=None, innermost_message=None, innermost_method=None, innermost_assembly=None, details=None):  # noqa: E501
        """EventsExceptionInfo - a model defined in Swagger"""  # noqa: E501

        self._severity_level = None
        self._problem_id = None
        self._handled_at = None
        self._assembly = None
        self._method = None
        self._message = None
        self._type = None
        self._outer_type = None
        self._outer_method = None
        self._outer_assembly = None
        self._outer_message = None
        self._innermost_type = None
        self._innermost_message = None
        self._innermost_method = None
        self._innermost_assembly = None
        self._details = None
        self.discriminator = None

        if severity_level is not None:
            self.severity_level = severity_level
        if problem_id is not None:
            self.problem_id = problem_id
        if handled_at is not None:
            self.handled_at = handled_at
        if assembly is not None:
            self.assembly = assembly
        if method is not None:
            self.method = method
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type
        if outer_type is not None:
            self.outer_type = outer_type
        if outer_method is not None:
            self.outer_method = outer_method
        if outer_assembly is not None:
            self.outer_assembly = outer_assembly
        if outer_message is not None:
            self.outer_message = outer_message
        if innermost_type is not None:
            self.innermost_type = innermost_type
        if innermost_message is not None:
            self.innermost_message = innermost_message
        if innermost_method is not None:
            self.innermost_method = innermost_method
        if innermost_assembly is not None:
            self.innermost_assembly = innermost_assembly
        if details is not None:
            self.details = details

    @property
    def severity_level(self):
        """Gets the severity_level of this EventsExceptionInfo.  # noqa: E501

        The severity level of the exception  # noqa: E501

        :return: The severity_level of this EventsExceptionInfo.  # noqa: E501
        :rtype: int
        """
        return self._severity_level

    @severity_level.setter
    def severity_level(self, severity_level):
        """Sets the severity_level of this EventsExceptionInfo.

        The severity level of the exception  # noqa: E501

        :param severity_level: The severity_level of this EventsExceptionInfo.  # noqa: E501
        :type: int
        """

        self._severity_level = severity_level

    @property
    def problem_id(self):
        """Gets the problem_id of this EventsExceptionInfo.  # noqa: E501

        The problem ID of the exception  # noqa: E501

        :return: The problem_id of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._problem_id

    @problem_id.setter
    def problem_id(self, problem_id):
        """Sets the problem_id of this EventsExceptionInfo.

        The problem ID of the exception  # noqa: E501

        :param problem_id: The problem_id of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._problem_id = problem_id

    @property
    def handled_at(self):
        """Gets the handled_at of this EventsExceptionInfo.  # noqa: E501

        Indicates where the exception was handled at  # noqa: E501

        :return: The handled_at of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._handled_at

    @handled_at.setter
    def handled_at(self, handled_at):
        """Sets the handled_at of this EventsExceptionInfo.

        Indicates where the exception was handled at  # noqa: E501

        :param handled_at: The handled_at of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._handled_at = handled_at

    @property
    def assembly(self):
        """Gets the assembly of this EventsExceptionInfo.  # noqa: E501

        The assembly which threw the exception  # noqa: E501

        :return: The assembly of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._assembly

    @assembly.setter
    def assembly(self, assembly):
        """Sets the assembly of this EventsExceptionInfo.

        The assembly which threw the exception  # noqa: E501

        :param assembly: The assembly of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._assembly = assembly

    @property
    def method(self):
        """Gets the method of this EventsExceptionInfo.  # noqa: E501

        The method that threw the exception  # noqa: E501

        :return: The method of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EventsExceptionInfo.

        The method that threw the exception  # noqa: E501

        :param method: The method of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def message(self):
        """Gets the message of this EventsExceptionInfo.  # noqa: E501

        The message of the exception  # noqa: E501

        :return: The message of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventsExceptionInfo.

        The message of the exception  # noqa: E501

        :param message: The message of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this EventsExceptionInfo.  # noqa: E501

        The type of the exception  # noqa: E501

        :return: The type of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsExceptionInfo.

        The type of the exception  # noqa: E501

        :param type: The type of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def outer_type(self):
        """Gets the outer_type of this EventsExceptionInfo.  # noqa: E501

        The outer type of the exception  # noqa: E501

        :return: The outer_type of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._outer_type

    @outer_type.setter
    def outer_type(self, outer_type):
        """Sets the outer_type of this EventsExceptionInfo.

        The outer type of the exception  # noqa: E501

        :param outer_type: The outer_type of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._outer_type = outer_type

    @property
    def outer_method(self):
        """Gets the outer_method of this EventsExceptionInfo.  # noqa: E501

        The outer method of the exception  # noqa: E501

        :return: The outer_method of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._outer_method

    @outer_method.setter
    def outer_method(self, outer_method):
        """Sets the outer_method of this EventsExceptionInfo.

        The outer method of the exception  # noqa: E501

        :param outer_method: The outer_method of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._outer_method = outer_method

    @property
    def outer_assembly(self):
        """Gets the outer_assembly of this EventsExceptionInfo.  # noqa: E501

        The outer assmebly of the exception  # noqa: E501

        :return: The outer_assembly of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._outer_assembly

    @outer_assembly.setter
    def outer_assembly(self, outer_assembly):
        """Sets the outer_assembly of this EventsExceptionInfo.

        The outer assmebly of the exception  # noqa: E501

        :param outer_assembly: The outer_assembly of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._outer_assembly = outer_assembly

    @property
    def outer_message(self):
        """Gets the outer_message of this EventsExceptionInfo.  # noqa: E501

        The outer message of the exception  # noqa: E501

        :return: The outer_message of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._outer_message

    @outer_message.setter
    def outer_message(self, outer_message):
        """Sets the outer_message of this EventsExceptionInfo.

        The outer message of the exception  # noqa: E501

        :param outer_message: The outer_message of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._outer_message = outer_message

    @property
    def innermost_type(self):
        """Gets the innermost_type of this EventsExceptionInfo.  # noqa: E501

        The inner most type of the exception  # noqa: E501

        :return: The innermost_type of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._innermost_type

    @innermost_type.setter
    def innermost_type(self, innermost_type):
        """Sets the innermost_type of this EventsExceptionInfo.

        The inner most type of the exception  # noqa: E501

        :param innermost_type: The innermost_type of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._innermost_type = innermost_type

    @property
    def innermost_message(self):
        """Gets the innermost_message of this EventsExceptionInfo.  # noqa: E501

        The inner most message of the exception  # noqa: E501

        :return: The innermost_message of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._innermost_message

    @innermost_message.setter
    def innermost_message(self, innermost_message):
        """Sets the innermost_message of this EventsExceptionInfo.

        The inner most message of the exception  # noqa: E501

        :param innermost_message: The innermost_message of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._innermost_message = innermost_message

    @property
    def innermost_method(self):
        """Gets the innermost_method of this EventsExceptionInfo.  # noqa: E501

        The inner most method of the exception  # noqa: E501

        :return: The innermost_method of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._innermost_method

    @innermost_method.setter
    def innermost_method(self, innermost_method):
        """Sets the innermost_method of this EventsExceptionInfo.

        The inner most method of the exception  # noqa: E501

        :param innermost_method: The innermost_method of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._innermost_method = innermost_method

    @property
    def innermost_assembly(self):
        """Gets the innermost_assembly of this EventsExceptionInfo.  # noqa: E501

        The inner most assembly of the exception  # noqa: E501

        :return: The innermost_assembly of this EventsExceptionInfo.  # noqa: E501
        :rtype: str
        """
        return self._innermost_assembly

    @innermost_assembly.setter
    def innermost_assembly(self, innermost_assembly):
        """Sets the innermost_assembly of this EventsExceptionInfo.

        The inner most assembly of the exception  # noqa: E501

        :param innermost_assembly: The innermost_assembly of this EventsExceptionInfo.  # noqa: E501
        :type: str
        """

        self._innermost_assembly = innermost_assembly

    @property
    def details(self):
        """Gets the details of this EventsExceptionInfo.  # noqa: E501

        The details of the exception  # noqa: E501

        :return: The details of this EventsExceptionInfo.  # noqa: E501
        :rtype: list[EventsExceptionDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EventsExceptionInfo.

        The details of the exception  # noqa: E501

        :param details: The details of this EventsExceptionInfo.  # noqa: E501
        :type: list[EventsExceptionDetail]
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsExceptionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
