# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.metric_id import MetricId  # noqa: F401,E501
from swagger_client.models.metrics_aggregation import MetricsAggregation  # noqa: F401,E501
from swagger_client.models.metrics_filter import MetricsFilter  # noqa: F401,E501
from swagger_client.models.metrics_interval import MetricsInterval  # noqa: F401,E501
from swagger_client.models.metrics_order_by import MetricsOrderBy  # noqa: F401,E501
from swagger_client.models.metrics_segment import MetricsSegment  # noqa: F401,E501
from swagger_client.models.metrics_timespan import MetricsTimespan  # noqa: F401,E501
from swagger_client.models.metrics_top import MetricsTop  # noqa: F401,E501


class MetricspostbodyschemaParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric_id': 'MetricId',
        'timespan': 'MetricsTimespan',
        'aggregation': 'MetricsAggregation',
        'interval': 'MetricsInterval',
        'segment': 'MetricsSegment',
        'top': 'MetricsTop',
        'orderby': 'MetricsOrderBy',
        'filter': 'MetricsFilter'
    }

    attribute_map = {
        'metric_id': 'metricId',
        'timespan': 'timespan',
        'aggregation': 'aggregation',
        'interval': 'interval',
        'segment': 'segment',
        'top': 'top',
        'orderby': 'orderby',
        'filter': 'filter'
    }

    def __init__(self, metric_id=None, timespan=None, aggregation=None, interval=None, segment=None, top=None, orderby=None, filter=None):  # noqa: E501
        """MetricspostbodyschemaParameters - a model defined in Swagger"""  # noqa: E501

        self._metric_id = None
        self._timespan = None
        self._aggregation = None
        self._interval = None
        self._segment = None
        self._top = None
        self._orderby = None
        self._filter = None
        self.discriminator = None

        self.metric_id = metric_id
        if timespan is not None:
            self.timespan = timespan
        if aggregation is not None:
            self.aggregation = aggregation
        if interval is not None:
            self.interval = interval
        if segment is not None:
            self.segment = segment
        if top is not None:
            self.top = top
        if orderby is not None:
            self.orderby = orderby
        if filter is not None:
            self.filter = filter

    @property
    def metric_id(self):
        """Gets the metric_id of this MetricspostbodyschemaParameters.  # noqa: E501


        :return: The metric_id of this MetricspostbodyschemaParameters.  # noqa: E501
        :rtype: MetricId
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """Sets the metric_id of this MetricspostbodyschemaParameters.


        :param metric_id: The metric_id of this MetricspostbodyschemaParameters.  # noqa: E501
        :type: MetricId
        """
        if metric_id is None:
            raise ValueError("Invalid value for `metric_id`, must not be `None`")  # noqa: E501

        self._metric_id = metric_id

    @property
    def timespan(self):
        """Gets the timespan of this MetricspostbodyschemaParameters.  # noqa: E501


        :return: The timespan of this MetricspostbodyschemaParameters.  # noqa: E501
        :rtype: MetricsTimespan
        """
        return self._timespan

    @timespan.setter
    def timespan(self, timespan):
        """Sets the timespan of this MetricspostbodyschemaParameters.


        :param timespan: The timespan of this MetricspostbodyschemaParameters.  # noqa: E501
        :type: MetricsTimespan
        """

        self._timespan = timespan

    @property
    def aggregation(self):
        """Gets the aggregation of this MetricspostbodyschemaParameters.  # noqa: E501


        :return: The aggregation of this MetricspostbodyschemaParameters.  # noqa: E501
        :rtype: MetricsAggregation
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this MetricspostbodyschemaParameters.


        :param aggregation: The aggregation of this MetricspostbodyschemaParameters.  # noqa: E501
        :type: MetricsAggregation
        """

        self._aggregation = aggregation

    @property
    def interval(self):
        """Gets the interval of this MetricspostbodyschemaParameters.  # noqa: E501


        :return: The interval of this MetricspostbodyschemaParameters.  # noqa: E501
        :rtype: MetricsInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this MetricspostbodyschemaParameters.


        :param interval: The interval of this MetricspostbodyschemaParameters.  # noqa: E501
        :type: MetricsInterval
        """

        self._interval = interval

    @property
    def segment(self):
        """Gets the segment of this MetricspostbodyschemaParameters.  # noqa: E501


        :return: The segment of this MetricspostbodyschemaParameters.  # noqa: E501
        :rtype: MetricsSegment
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this MetricspostbodyschemaParameters.


        :param segment: The segment of this MetricspostbodyschemaParameters.  # noqa: E501
        :type: MetricsSegment
        """

        self._segment = segment

    @property
    def top(self):
        """Gets the top of this MetricspostbodyschemaParameters.  # noqa: E501


        :return: The top of this MetricspostbodyschemaParameters.  # noqa: E501
        :rtype: MetricsTop
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this MetricspostbodyschemaParameters.


        :param top: The top of this MetricspostbodyschemaParameters.  # noqa: E501
        :type: MetricsTop
        """

        self._top = top

    @property
    def orderby(self):
        """Gets the orderby of this MetricspostbodyschemaParameters.  # noqa: E501


        :return: The orderby of this MetricspostbodyschemaParameters.  # noqa: E501
        :rtype: MetricsOrderBy
        """
        return self._orderby

    @orderby.setter
    def orderby(self, orderby):
        """Sets the orderby of this MetricspostbodyschemaParameters.


        :param orderby: The orderby of this MetricspostbodyschemaParameters.  # noqa: E501
        :type: MetricsOrderBy
        """

        self._orderby = orderby

    @property
    def filter(self):
        """Gets the filter of this MetricspostbodyschemaParameters.  # noqa: E501


        :return: The filter of this MetricspostbodyschemaParameters.  # noqa: E501
        :rtype: MetricsFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MetricspostbodyschemaParameters.


        :param filter: The filter of this MetricspostbodyschemaParameters.  # noqa: E501
        :type: MetricsFilter
        """

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricspostbodyschemaParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
