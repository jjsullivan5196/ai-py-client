# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.events_ai_info import EventsAiInfo  # noqa: F401,E501
from swagger_client.models.events_application_info import EventsApplicationInfo  # noqa: F401,E501
from swagger_client.models.events_client_info import EventsClientInfo  # noqa: F401,E501
from swagger_client.models.events_cloud_info import EventsCloudInfo  # noqa: F401,E501
from swagger_client.models.events_operation_info import EventsOperationInfo  # noqa: F401,E501
from swagger_client.models.events_session_info import EventsSessionInfo  # noqa: F401,E501
from swagger_client.models.events_user_info import EventsUserInfo  # noqa: F401,E501
from swagger_client.models.eventsresultdata_custom_dimensions import EventsresultdataCustomDimensions  # noqa: F401,E501
from swagger_client.models.eventsresultdata_custom_measurements import EventsresultdataCustomMeasurements  # noqa: F401,E501


class EventsResultData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'count': 'int',
        'timestamp': 'datetime',
        'custom_dimensions': 'EventsresultdataCustomDimensions',
        'custom_measurements': 'EventsresultdataCustomMeasurements',
        'operation': 'EventsOperationInfo',
        'session': 'EventsSessionInfo',
        'user': 'EventsUserInfo',
        'cloud': 'EventsCloudInfo',
        'ai': 'EventsAiInfo',
        'application': 'EventsApplicationInfo',
        'client': 'EventsClientInfo'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'count': 'count',
        'timestamp': 'timestamp',
        'custom_dimensions': 'customDimensions',
        'custom_measurements': 'customMeasurements',
        'operation': 'operation',
        'session': 'session',
        'user': 'user',
        'cloud': 'cloud',
        'ai': 'ai',
        'application': 'application',
        'client': 'client'
    }

    discriminator_value_class_map = {
        'events-trace-result': 'EventsTraceResult',
        'events-dependency-result': 'EventsDependencyResult',
        'events-performanceCounter-result': 'EventsPerformanceCounterResult',
        'events-customMetric-result': 'EventsCustomMetricResult',
        'events-availabilityResult-result': 'EventsAvailabilityResultResult',
        'events-browserTiming-result': 'EventsBrowserTimingResult',
        'events-customEvent-result': 'EventsCustomEventResult',
        'events-exception-result': 'EventsExceptionResult',
        'events-pageView-result': 'EventsPageViewResult',
        'events-request-result': 'EventsRequestResult'
    }

    def __init__(self, id=None, type=None, count=None, timestamp=None, custom_dimensions=None, custom_measurements=None, operation=None, session=None, user=None, cloud=None, ai=None, application=None, client=None):  # noqa: E501
        """EventsResultData - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._count = None
        self._timestamp = None
        self._custom_dimensions = None
        self._custom_measurements = None
        self._operation = None
        self._session = None
        self._user = None
        self._cloud = None
        self._ai = None
        self._application = None
        self._client = None
        self.discriminator = 'type'

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if count is not None:
            self.count = count
        if timestamp is not None:
            self.timestamp = timestamp
        if custom_dimensions is not None:
            self.custom_dimensions = custom_dimensions
        if custom_measurements is not None:
            self.custom_measurements = custom_measurements
        if operation is not None:
            self.operation = operation
        if session is not None:
            self.session = session
        if user is not None:
            self.user = user
        if cloud is not None:
            self.cloud = cloud
        if ai is not None:
            self.ai = ai
        if application is not None:
            self.application = application
        if client is not None:
            self.client = client

    @property
    def id(self):
        """Gets the id of this EventsResultData.  # noqa: E501

        The unique ID for this event.  # noqa: E501

        :return: The id of this EventsResultData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsResultData.

        The unique ID for this event.  # noqa: E501

        :param id: The id of this EventsResultData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this EventsResultData.  # noqa: E501

        The type of event.  # noqa: E501

        :return: The type of this EventsResultData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsResultData.

        The type of event.  # noqa: E501

        :param type: The type of this EventsResultData.  # noqa: E501
        :type: str
        """
        allowed_values = ["trace", "customEvent", "pageView", "browserTiming", "request", "dependency", "exception", "availabilityResult", "performanceCounter", "customMetric"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def count(self):
        """Gets the count of this EventsResultData.  # noqa: E501

        Count of the event  # noqa: E501

        :return: The count of this EventsResultData.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this EventsResultData.

        Count of the event  # noqa: E501

        :param count: The count of this EventsResultData.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def timestamp(self):
        """Gets the timestamp of this EventsResultData.  # noqa: E501

        Timestamp of the event  # noqa: E501

        :return: The timestamp of this EventsResultData.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EventsResultData.

        Timestamp of the event  # noqa: E501

        :param timestamp: The timestamp of this EventsResultData.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def custom_dimensions(self):
        """Gets the custom_dimensions of this EventsResultData.  # noqa: E501


        :return: The custom_dimensions of this EventsResultData.  # noqa: E501
        :rtype: EventsresultdataCustomDimensions
        """
        return self._custom_dimensions

    @custom_dimensions.setter
    def custom_dimensions(self, custom_dimensions):
        """Sets the custom_dimensions of this EventsResultData.


        :param custom_dimensions: The custom_dimensions of this EventsResultData.  # noqa: E501
        :type: EventsresultdataCustomDimensions
        """

        self._custom_dimensions = custom_dimensions

    @property
    def custom_measurements(self):
        """Gets the custom_measurements of this EventsResultData.  # noqa: E501


        :return: The custom_measurements of this EventsResultData.  # noqa: E501
        :rtype: EventsresultdataCustomMeasurements
        """
        return self._custom_measurements

    @custom_measurements.setter
    def custom_measurements(self, custom_measurements):
        """Sets the custom_measurements of this EventsResultData.


        :param custom_measurements: The custom_measurements of this EventsResultData.  # noqa: E501
        :type: EventsresultdataCustomMeasurements
        """

        self._custom_measurements = custom_measurements

    @property
    def operation(self):
        """Gets the operation of this EventsResultData.  # noqa: E501

        Operation info of the event  # noqa: E501

        :return: The operation of this EventsResultData.  # noqa: E501
        :rtype: EventsOperationInfo
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this EventsResultData.

        Operation info of the event  # noqa: E501

        :param operation: The operation of this EventsResultData.  # noqa: E501
        :type: EventsOperationInfo
        """

        self._operation = operation

    @property
    def session(self):
        """Gets the session of this EventsResultData.  # noqa: E501

        Session info of the event  # noqa: E501

        :return: The session of this EventsResultData.  # noqa: E501
        :rtype: EventsSessionInfo
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this EventsResultData.

        Session info of the event  # noqa: E501

        :param session: The session of this EventsResultData.  # noqa: E501
        :type: EventsSessionInfo
        """

        self._session = session

    @property
    def user(self):
        """Gets the user of this EventsResultData.  # noqa: E501

        User info of the event  # noqa: E501

        :return: The user of this EventsResultData.  # noqa: E501
        :rtype: EventsUserInfo
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EventsResultData.

        User info of the event  # noqa: E501

        :param user: The user of this EventsResultData.  # noqa: E501
        :type: EventsUserInfo
        """

        self._user = user

    @property
    def cloud(self):
        """Gets the cloud of this EventsResultData.  # noqa: E501

        Cloud info of the event  # noqa: E501

        :return: The cloud of this EventsResultData.  # noqa: E501
        :rtype: EventsCloudInfo
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this EventsResultData.

        Cloud info of the event  # noqa: E501

        :param cloud: The cloud of this EventsResultData.  # noqa: E501
        :type: EventsCloudInfo
        """

        self._cloud = cloud

    @property
    def ai(self):
        """Gets the ai of this EventsResultData.  # noqa: E501

        AI info of the event  # noqa: E501

        :return: The ai of this EventsResultData.  # noqa: E501
        :rtype: EventsAiInfo
        """
        return self._ai

    @ai.setter
    def ai(self, ai):
        """Sets the ai of this EventsResultData.

        AI info of the event  # noqa: E501

        :param ai: The ai of this EventsResultData.  # noqa: E501
        :type: EventsAiInfo
        """

        self._ai = ai

    @property
    def application(self):
        """Gets the application of this EventsResultData.  # noqa: E501

        Application info of the event  # noqa: E501

        :return: The application of this EventsResultData.  # noqa: E501
        :rtype: EventsApplicationInfo
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this EventsResultData.

        Application info of the event  # noqa: E501

        :param application: The application of this EventsResultData.  # noqa: E501
        :type: EventsApplicationInfo
        """

        self._application = application

    @property
    def client(self):
        """Gets the client of this EventsResultData.  # noqa: E501

        Client info of the event  # noqa: E501

        :return: The client of this EventsResultData.  # noqa: E501
        :rtype: EventsClientInfo
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this EventsResultData.

        Client info of the event  # noqa: E501

        :param client: The client of this EventsResultData.  # noqa: E501
        :type: EventsClientInfo
        """

        self._client = client

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsResultData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
