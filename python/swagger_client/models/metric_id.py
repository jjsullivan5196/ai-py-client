# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MetricId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    REQUESTS_COUNT = "requests/count"
    REQUESTS_DURATION = "requests/duration"
    REQUESTS_FAILED = "requests/failed"
    USERS_COUNT = "users/count"
    USERS_AUTHENTICATED = "users/authenticated"
    PAGEVIEWS_COUNT = "pageViews/count"
    PAGEVIEWS_DURATION = "pageViews/duration"
    CLIENT_PROCESSINGDURATION = "client/processingDuration"
    CLIENT_RECEIVEDURATION = "client/receiveDuration"
    CLIENT_NETWORKDURATION = "client/networkDuration"
    CLIENT_SENDDURATION = "client/sendDuration"
    CLIENT_TOTALDURATION = "client/totalDuration"
    DEPENDENCIES_COUNT = "dependencies/count"
    DEPENDENCIES_FAILED = "dependencies/failed"
    DEPENDENCIES_DURATION = "dependencies/duration"
    EXCEPTIONS_COUNT = "exceptions/count"
    EXCEPTIONS_BROWSER = "exceptions/browser"
    EXCEPTIONS_SERVER = "exceptions/server"
    SESSIONS_COUNT = "sessions/count"
    PERFORMANCECOUNTERS_REQUESTEXECUTIONTIME = "performanceCounters/requestExecutionTime"
    PERFORMANCECOUNTERS_REQUESTSPERSECOND = "performanceCounters/requestsPerSecond"
    PERFORMANCECOUNTERS_REQUESTSINQUEUE = "performanceCounters/requestsInQueue"
    PERFORMANCECOUNTERS_MEMORYAVAILABLEBYTES = "performanceCounters/memoryAvailableBytes"
    PERFORMANCECOUNTERS_EXCEPTIONSPERSECOND = "performanceCounters/exceptionsPerSecond"
    PERFORMANCECOUNTERS_PROCESSCPUPERCENTAGE = "performanceCounters/processCpuPercentage"
    PERFORMANCECOUNTERS_PROCESSIOBYTESPERSECOND = "performanceCounters/processIOBytesPerSecond"
    PERFORMANCECOUNTERS_PROCESSPRIVATEBYTES = "performanceCounters/processPrivateBytes"
    PERFORMANCECOUNTERS_PROCESSORCPUPERCENTAGE = "performanceCounters/processorCpuPercentage"
    AVAILABILITYRESULTS_AVAILABILITYPERCENTAGE = "availabilityResults/availabilityPercentage"
    AVAILABILITYRESULTS_DURATION = "availabilityResults/duration"
    BILLING_TELEMETRYCOUNT = "billing/telemetryCount"
    CUSTOMEVENTS_COUNT = "customEvents/count"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """MetricId - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
