# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventsClientInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'os': 'str',
        'type': 'str',
        'browser': 'str',
        'ip': 'str',
        'city': 'str',
        'state_or_province': 'str',
        'country_or_region': 'str'
    }

    attribute_map = {
        'model': 'model',
        'os': 'os',
        'type': 'type',
        'browser': 'browser',
        'ip': 'ip',
        'city': 'city',
        'state_or_province': 'stateOrProvince',
        'country_or_region': 'countryOrRegion'
    }

    def __init__(self, model=None, os=None, type=None, browser=None, ip=None, city=None, state_or_province=None, country_or_region=None):  # noqa: E501
        """EventsClientInfo - a model defined in Swagger"""  # noqa: E501

        self._model = None
        self._os = None
        self._type = None
        self._browser = None
        self._ip = None
        self._city = None
        self._state_or_province = None
        self._country_or_region = None
        self.discriminator = None

        if model is not None:
            self.model = model
        if os is not None:
            self.os = os
        if type is not None:
            self.type = type
        if browser is not None:
            self.browser = browser
        if ip is not None:
            self.ip = ip
        if city is not None:
            self.city = city
        if state_or_province is not None:
            self.state_or_province = state_or_province
        if country_or_region is not None:
            self.country_or_region = country_or_region

    @property
    def model(self):
        """Gets the model of this EventsClientInfo.  # noqa: E501

        Model of the client  # noqa: E501

        :return: The model of this EventsClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this EventsClientInfo.

        Model of the client  # noqa: E501

        :param model: The model of this EventsClientInfo.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def os(self):
        """Gets the os of this EventsClientInfo.  # noqa: E501

        Operating system of the client  # noqa: E501

        :return: The os of this EventsClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this EventsClientInfo.

        Operating system of the client  # noqa: E501

        :param os: The os of this EventsClientInfo.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def type(self):
        """Gets the type of this EventsClientInfo.  # noqa: E501

        Type of the client  # noqa: E501

        :return: The type of this EventsClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsClientInfo.

        Type of the client  # noqa: E501

        :param type: The type of this EventsClientInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def browser(self):
        """Gets the browser of this EventsClientInfo.  # noqa: E501

        Browser of the client  # noqa: E501

        :return: The browser of this EventsClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this EventsClientInfo.

        Browser of the client  # noqa: E501

        :param browser: The browser of this EventsClientInfo.  # noqa: E501
        :type: str
        """

        self._browser = browser

    @property
    def ip(self):
        """Gets the ip of this EventsClientInfo.  # noqa: E501

        IP address of the client  # noqa: E501

        :return: The ip of this EventsClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this EventsClientInfo.

        IP address of the client  # noqa: E501

        :param ip: The ip of this EventsClientInfo.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def city(self):
        """Gets the city of this EventsClientInfo.  # noqa: E501

        City of the client  # noqa: E501

        :return: The city of this EventsClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EventsClientInfo.

        City of the client  # noqa: E501

        :param city: The city of this EventsClientInfo.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state_or_province(self):
        """Gets the state_or_province of this EventsClientInfo.  # noqa: E501

        State or province of the client  # noqa: E501

        :return: The state_or_province of this EventsClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this EventsClientInfo.

        State or province of the client  # noqa: E501

        :param state_or_province: The state_or_province of this EventsClientInfo.  # noqa: E501
        :type: str
        """

        self._state_or_province = state_or_province

    @property
    def country_or_region(self):
        """Gets the country_or_region of this EventsClientInfo.  # noqa: E501

        Country or region of the client  # noqa: E501

        :return: The country_or_region of this EventsClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._country_or_region

    @country_or_region.setter
    def country_or_region(self, country_or_region):
        """Sets the country_or_region of this EventsClientInfo.

        Country or region of the client  # noqa: E501

        :param country_or_region: The country_or_region of this EventsClientInfo.  # noqa: E501
        :type: str
        """

        self._country_or_region = country_or_region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsClientInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
