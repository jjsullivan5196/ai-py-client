# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.metricspostbodyschema_parameters import MetricspostbodyschemaParameters  # noqa: F401,E501


class MetricsPostBodySchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'parameters': 'MetricspostbodyschemaParameters'
    }

    attribute_map = {
        'id': 'id',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, parameters=None):  # noqa: E501
        """MetricsPostBodySchema - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._parameters = None
        self.discriminator = None

        self.id = id
        self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this MetricsPostBodySchema.  # noqa: E501

        An identifier for this query.  Must be unique within the post body of the request.  This identifier will be the 'id' property of the response object representing this query.  # noqa: E501

        :return: The id of this MetricsPostBodySchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsPostBodySchema.

        An identifier for this query.  Must be unique within the post body of the request.  This identifier will be the 'id' property of the response object representing this query.  # noqa: E501

        :param id: The id of this MetricsPostBodySchema.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def parameters(self):
        """Gets the parameters of this MetricsPostBodySchema.  # noqa: E501


        :return: The parameters of this MetricsPostBodySchema.  # noqa: E501
        :rtype: MetricspostbodyschemaParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this MetricsPostBodySchema.


        :param parameters: The parameters of this MetricsPostBodySchema.  # noqa: E501
        :type: MetricspostbodyschemaParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsPostBodySchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
