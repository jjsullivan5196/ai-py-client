# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventsCustomMetricInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'int',
        'value_sum': 'int',
        'value_count': 'int',
        'value_min': 'int',
        'value_max': 'int',
        'value_std_dev': 'int'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'value_sum': 'valueSum',
        'value_count': 'valueCount',
        'value_min': 'valueMin',
        'value_max': 'valueMax',
        'value_std_dev': 'valueStdDev'
    }

    def __init__(self, name=None, value=None, value_sum=None, value_count=None, value_min=None, value_max=None, value_std_dev=None):  # noqa: E501
        """EventsCustomMetricInfo - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._value = None
        self._value_sum = None
        self._value_count = None
        self._value_min = None
        self._value_max = None
        self._value_std_dev = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if value_sum is not None:
            self.value_sum = value_sum
        if value_count is not None:
            self.value_count = value_count
        if value_min is not None:
            self.value_min = value_min
        if value_max is not None:
            self.value_max = value_max
        if value_std_dev is not None:
            self.value_std_dev = value_std_dev

    @property
    def name(self):
        """Gets the name of this EventsCustomMetricInfo.  # noqa: E501

        The name of the custom metric  # noqa: E501

        :return: The name of this EventsCustomMetricInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventsCustomMetricInfo.

        The name of the custom metric  # noqa: E501

        :param name: The name of this EventsCustomMetricInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this EventsCustomMetricInfo.  # noqa: E501

        The value of the custom metric  # noqa: E501

        :return: The value of this EventsCustomMetricInfo.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EventsCustomMetricInfo.

        The value of the custom metric  # noqa: E501

        :param value: The value of this EventsCustomMetricInfo.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def value_sum(self):
        """Gets the value_sum of this EventsCustomMetricInfo.  # noqa: E501

        The sum of the custom metric  # noqa: E501

        :return: The value_sum of this EventsCustomMetricInfo.  # noqa: E501
        :rtype: int
        """
        return self._value_sum

    @value_sum.setter
    def value_sum(self, value_sum):
        """Sets the value_sum of this EventsCustomMetricInfo.

        The sum of the custom metric  # noqa: E501

        :param value_sum: The value_sum of this EventsCustomMetricInfo.  # noqa: E501
        :type: int
        """

        self._value_sum = value_sum

    @property
    def value_count(self):
        """Gets the value_count of this EventsCustomMetricInfo.  # noqa: E501

        The count of the custom metric  # noqa: E501

        :return: The value_count of this EventsCustomMetricInfo.  # noqa: E501
        :rtype: int
        """
        return self._value_count

    @value_count.setter
    def value_count(self, value_count):
        """Sets the value_count of this EventsCustomMetricInfo.

        The count of the custom metric  # noqa: E501

        :param value_count: The value_count of this EventsCustomMetricInfo.  # noqa: E501
        :type: int
        """

        self._value_count = value_count

    @property
    def value_min(self):
        """Gets the value_min of this EventsCustomMetricInfo.  # noqa: E501

        The minimum value of the custom metric  # noqa: E501

        :return: The value_min of this EventsCustomMetricInfo.  # noqa: E501
        :rtype: int
        """
        return self._value_min

    @value_min.setter
    def value_min(self, value_min):
        """Sets the value_min of this EventsCustomMetricInfo.

        The minimum value of the custom metric  # noqa: E501

        :param value_min: The value_min of this EventsCustomMetricInfo.  # noqa: E501
        :type: int
        """

        self._value_min = value_min

    @property
    def value_max(self):
        """Gets the value_max of this EventsCustomMetricInfo.  # noqa: E501

        The maximum value of the custom metric  # noqa: E501

        :return: The value_max of this EventsCustomMetricInfo.  # noqa: E501
        :rtype: int
        """
        return self._value_max

    @value_max.setter
    def value_max(self, value_max):
        """Sets the value_max of this EventsCustomMetricInfo.

        The maximum value of the custom metric  # noqa: E501

        :param value_max: The value_max of this EventsCustomMetricInfo.  # noqa: E501
        :type: int
        """

        self._value_max = value_max

    @property
    def value_std_dev(self):
        """Gets the value_std_dev of this EventsCustomMetricInfo.  # noqa: E501

        The standard deviation of the custom metric  # noqa: E501

        :return: The value_std_dev of this EventsCustomMetricInfo.  # noqa: E501
        :rtype: int
        """
        return self._value_std_dev

    @value_std_dev.setter
    def value_std_dev(self, value_std_dev):
        """Sets the value_std_dev of this EventsCustomMetricInfo.

        The standard deviation of the custom metric  # noqa: E501

        :param value_std_dev: The value_std_dev of this EventsCustomMetricInfo.  # noqa: E501
        :type: int
        """

        self._value_std_dev = value_std_dev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsCustomMetricInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
