# coding: utf-8

"""
    AI public API

    This API exposes AI metric & event information and associated metadata  # noqa: E501

    OpenAPI spec version: v1
    Contact: aiapi@microsoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventsRequestInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'url': 'str',
        'success': 'str',
        'duration': 'float',
        'performance_bucket': 'str',
        'result_code': 'str',
        'source': 'str',
        'id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'success': 'success',
        'duration': 'duration',
        'performance_bucket': 'performanceBucket',
        'result_code': 'resultCode',
        'source': 'source',
        'id': 'id'
    }

    def __init__(self, name=None, url=None, success=None, duration=None, performance_bucket=None, result_code=None, source=None, id=None):  # noqa: E501
        """EventsRequestInfo - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._url = None
        self._success = None
        self._duration = None
        self._performance_bucket = None
        self._result_code = None
        self._source = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if success is not None:
            self.success = success
        if duration is not None:
            self.duration = duration
        if performance_bucket is not None:
            self.performance_bucket = performance_bucket
        if result_code is not None:
            self.result_code = result_code
        if source is not None:
            self.source = source
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this EventsRequestInfo.  # noqa: E501

        The name of the request  # noqa: E501

        :return: The name of this EventsRequestInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventsRequestInfo.

        The name of the request  # noqa: E501

        :param name: The name of this EventsRequestInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this EventsRequestInfo.  # noqa: E501

        The URL of the request  # noqa: E501

        :return: The url of this EventsRequestInfo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventsRequestInfo.

        The URL of the request  # noqa: E501

        :param url: The url of this EventsRequestInfo.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def success(self):
        """Gets the success of this EventsRequestInfo.  # noqa: E501

        Indicates if the request was successful  # noqa: E501

        :return: The success of this EventsRequestInfo.  # noqa: E501
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this EventsRequestInfo.

        Indicates if the request was successful  # noqa: E501

        :param success: The success of this EventsRequestInfo.  # noqa: E501
        :type: str
        """

        self._success = success

    @property
    def duration(self):
        """Gets the duration of this EventsRequestInfo.  # noqa: E501

        The duration of the request  # noqa: E501

        :return: The duration of this EventsRequestInfo.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EventsRequestInfo.

        The duration of the request  # noqa: E501

        :param duration: The duration of this EventsRequestInfo.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def performance_bucket(self):
        """Gets the performance_bucket of this EventsRequestInfo.  # noqa: E501

        The performance bucket of the request  # noqa: E501

        :return: The performance_bucket of this EventsRequestInfo.  # noqa: E501
        :rtype: str
        """
        return self._performance_bucket

    @performance_bucket.setter
    def performance_bucket(self, performance_bucket):
        """Sets the performance_bucket of this EventsRequestInfo.

        The performance bucket of the request  # noqa: E501

        :param performance_bucket: The performance_bucket of this EventsRequestInfo.  # noqa: E501
        :type: str
        """

        self._performance_bucket = performance_bucket

    @property
    def result_code(self):
        """Gets the result_code of this EventsRequestInfo.  # noqa: E501

        The result code of the request  # noqa: E501

        :return: The result_code of this EventsRequestInfo.  # noqa: E501
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this EventsRequestInfo.

        The result code of the request  # noqa: E501

        :param result_code: The result_code of this EventsRequestInfo.  # noqa: E501
        :type: str
        """

        self._result_code = result_code

    @property
    def source(self):
        """Gets the source of this EventsRequestInfo.  # noqa: E501

        The source of the request  # noqa: E501

        :return: The source of this EventsRequestInfo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EventsRequestInfo.

        The source of the request  # noqa: E501

        :param source: The source of this EventsRequestInfo.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def id(self):
        """Gets the id of this EventsRequestInfo.  # noqa: E501

        The ID of the request  # noqa: E501

        :return: The id of this EventsRequestInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsRequestInfo.

        The ID of the request  # noqa: E501

        :param id: The id of this EventsRequestInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsRequestInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
